{
	"info": {
		"_postman_id": "879bb265-9f86-434b-8cd2-28472dbab7e8",
		"name": "Test Explore With Me - feature rating",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28197593"
	},
	"item": [
		{
			"name": "CONFLICT initiatior add like",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add like - user 1, event 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test userId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData.userId, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test eventId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('eventId');\r",
							"    pm.expect(jsonData.eventId, '\"id\" must be 5').to.eql(5);\r",
							"});\r",
							"pm.test(\"Test reactionType 'reactionType' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('reactionType');\r",
							"    pm.expect(jsonData.reactionType, '\"id\" must be LIKE').to.eql('LIKE');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add like - user 4, event 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test userId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData.userId, '\"id\" must be 4').to.eql(4);\r",
							"});\r",
							"pm.test(\"Test eventId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('eventId');\r",
							"    pm.expect(jsonData.eventId, '\"id\" must be 5').to.eql(5);\r",
							"});\r",
							"pm.test(\"Test reactionType 'reactionType' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('reactionType');\r",
							"    pm.expect(jsonData.reactionType, '\"id\" must be LIKE').to.eql('LIKE');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "4"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add like - user 5, event 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test userId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData.userId, '\"id\" must be 5').to.eql(5);\r",
							"});\r",
							"pm.test(\"Test eventId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('eventId');\r",
							"    pm.expect(jsonData.eventId, '\"id\" must be 5').to.eql(5);\r",
							"});\r",
							"pm.test(\"Test reactionType 'reactionType' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('reactionType');\r",
							"    pm.expect(jsonData.reactionType, '\"id\" must be LIKE').to.eql('LIKE');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "5"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add like - user 6, event 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test userId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData.userId, '\"id\" must be 6').to.eql(6);\r",
							"});\r",
							"pm.test(\"Test eventId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('eventId');\r",
							"    pm.expect(jsonData.eventId, '\"id\" must be 5').to.eql(5);\r",
							"});\r",
							"pm.test(\"Test reactionType 'reactionType' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('reactionType');\r",
							"    pm.expect(jsonData.reactionType, '\"id\" must be LIKE').to.eql('LIKE');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "6"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add dislike user 3, event 89",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test userId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData.userId, '\"id\" must be 3').to.eql(3);\r",
							"});\r",
							"pm.test(\"Test eventId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('eventId');\r",
							"    pm.expect(jsonData.eventId, '\"id\" must be 89').to.eql(89);\r",
							"});\r",
							"pm.test(\"Test reactionType 'reactionType' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('reactionType');\r",
							"    pm.expect(jsonData.reactionType, '\"id\" must be DISLIKE').to.eql('DISLIKE');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=DISLIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "DISLIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "89"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CONFLICT dublicate del",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test userId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData.userId, '\"id\" must be 3').to.eql(3);\r",
							"});\r",
							"pm.test(\"Test eventId 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('eventId');\r",
							"    pm.expect(jsonData.eventId, '\"id\" must be 89').to.eql(89);\r",
							"});\r",
							"pm.test(\"Test reactionType 'reactionType' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('reactionType');\r",
							"    pm.expect(jsonData.reactionType, '\"id\" must be DISLIKE').to.eql('DISLIKE');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=DISLIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "DISLIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "89"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get sort = RATING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ должен содержать данные в формате json\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"    pm.expect(jsonData.length, 'Количество элементов в массиве должно быть 10').to.eql(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Test event[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" must be 5').to.eql(5);\r",
							"});\r",
							"\r",
							"pm.test(\"Тест данных для первого элемента\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const expectedId = 5;\r",
							"    const firstEvent = response.find(event => event.id === expectedId);\r",
							"    pm.expect(firstEvent).to.be.ok;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events?sort=RATING&from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "sort",
							"value": "RATING"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "del like - user1, event 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "del dislike - user 3 event 89",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=DISLIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "DISLIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "89"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CONFLICT del like",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "89"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all reactions, user 3, eventId = empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ должен содержать данные в формате json\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"    pm.expect(jsonData.length, 'Количество элементов в массиве должно быть 3').to.eql(3);\r",
							"});\r",
							"\r",
							"pm.test(\"Test reaction[0] 'userId' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('userId');\r",
							"    pm.expect(jsonData[0].userId, '\"userId\" must be 4').to.eql(4);\r",
							"});\r",
							"pm.test(\"Test reaction[1] 'userId' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('userId');\r",
							"    pm.expect(jsonData[1].userId, '\"userId\" must be 5').to.eql(5);\r",
							"});\r",
							"pm.test(\"Test reaction[2] 'userId' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[2]).to.have.property('userId');\r",
							"    pm.expect(jsonData[2].userId, '\"userId\" must be 6').to.eql(6);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating"
					],
					"query": [
						{
							"key": "eventId",
							"value": "5",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get reactions  - user 4, event 5",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating?eventId=5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating"
					],
					"query": [
						{
							"key": "eventId",
							"value": "5"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NOT FOUND add like - user 9999, event 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test error handler 'message' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"userId\" must be 9999').to.eql(\"User with id=9999 was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "9999"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NOT FOUND add like - user -1 event 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test error handler 'message' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"userId\" must be -1').to.eql(\"User with id=-1 was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "-1"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NOT FOUND add like - user 1, event 9999",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test error handler 'message' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"eventId\" must be 9999').to.eql(\"Event with id=9999 was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "9999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NOT FOUND add like - user 1, event -1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test error handler 'message' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"eventId\" must be -1').to.eql(\"Event with id=-1 was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NOT FOUND add like - reactionType = null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BAD REQUEST add like - reactionType = LOL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LOL",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LOL"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BAD REQUEST add like - userId = null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": ""
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BAD REQUEST add like - eventId = null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "4"
						},
						{
							"key": "eventId",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BAD REQUEST get all reactions - empty user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating"
					],
					"query": [
						{
							"key": "eventId",
							"value": "5",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NOT FOUND del like - user 9999, event 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test error handler 'message' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"id\" must be 9999').to.eql(\"User with id=9999 was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "9999"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NOT FOUND del like - user 1, event 9999",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Get genre response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test error handler 'message' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"id\" must be 9999').to.eql(\"Event with id=9999 was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "9999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BAD REQUEST dell like - userId = null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": ""
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BAD REQUEST dell like - eventId = null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId/reaction?reactionType=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId",
						"reaction"
					],
					"query": [
						{
							"key": "reactionType",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": ""
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}